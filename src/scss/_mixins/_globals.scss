// ----- Global Mixins ----- //
// ------------------- //
//    Common Mixins    //
// ------------------- //
///
// @desc Produces CSS @media breakpoint
//
// @param {string} $key -- The key of $breakpoints map
///
@mixin breakpoint($key) {
    // Print breakpoint
    @if ($key == print) {
        // Retrieve the result
        @media print {
            @content;
        }
    }
    // Grid breakpoints
    @else if map-has-key($breakpoints, $key) {
        // Retrieve the result
        @media (min-width: #{map-get($breakpoints, $key)}) {
            @content;
        }
    }
    // Handle error
    @else {
        @warn "Unknown `#{$key}` in `$breakpoints` map.";
    }
}


///
// @desc The blueprint for responsive classes
//
// @param {boolean} $responsive -- The responsive value
///
@mixin responsive-blueprint($name, $responsive: true) {
    @if $responsive == true {
        @each $breakpoint, $size in $breakpoints {
            @include breakpoint($breakpoint) {
                .#{$breakpoint + $sep + $name} {
                    @content;
                }
            }
        }
    }
}


///
// @desc Fetches vendor mixin
//
// @param {string} $key    -- The vendor name
// @param {string} $value  -- The vendor CSS value
// @param {string} $strict -- The !important CSS value placeholder
///
@mixin get-vendor($key, $value, $strict: "") {
    @if $key == box-sizing { @include box-sizing($value, $strict); }
    @if $key == text-size-adjust { @include text-size-adjust($value, $strict); }
    @if $key == box-shadow { @include box-shadow($value, $strict); }
    @if $key == filter { @include filter($value, $strict); }
    @if $key == transform { @include transform($value, $strict); }
    @if $key == transition { @include transition($value, $strict); }
    @if $key == transition-timing-function { @include transition-timing-function($value, $strict); }
    @if $key == flex { @include flex($value, $strict); }
    @if $key == flex-direction { @include flex-direction($value, $strict); }
    @if $key == flex-wrap { @include flex-wrap($value, $strict); }
    @if $key == flex-flow { @include flex-flow($value, $strict); }
    @if $key == align-content { @include align-content($value, $strict); }
    @if $key == justify-content { @include justify-content($value, $strict); }
    @if $key == align-items { @include align-items($value, $strict); }
    @if $key == order { @include order($value, $strict); }
    @if $key == flex-grow { @include flex-grow($value, $strict); }
    @if $key == flex-shrink { @include flex-shrink($value, $strict); }
    @if $key == flex-basis { @include flex-basis($value, $strict); }
    @if $key == align-self { @include align-self($value, $strict); }
    @if $key == appearance { @include appearance($value, $strict); }
}


///
// @desc Generates css styles with vendor if available
//
// @param {string} $key    -- The vendor name
// @param {string} $value  -- The vendor CSS value
// @param {string} $strict -- The !important CSS value placeholder
///
@mixin generate-vendor($key, $value, $strict: false) {
    $strict: check-strict($strict);

    @if check-vendor($key) {
        @include get-vendor($key, $value + $strict);
    }
    @else if $key == "display" and $value == "flex" {
        @include display-flex($strict);
    }
    @else {
        #{$key}: #{$value + $strict};
    }
}


///
// @desc Generates css direction for ltr and rtl support 
//
// @param {map}    $ltr-styles -- LTR styles
// @param {map}    $rtl-styles -- RTL styles
// @param {string} $strict     -- The !important CSS value placeholder
///
@mixin direction-styles($ltr-styles: $ltr-styles, $rtl-styles: $rtl-styles, $strict: false) {
    // LTR
    @if $ltr {
        @each $key, $value in $ltr-styles {
            @include generate-vendor($key, $value, $strict);
        }
    }
    // RTL
    @else {
        @each $key, $value in $rtl-styles {
            @include generate-vendor($key, $value, $strict);
        }
    }
}


///
// @desc Generates css styles for a map 
//
// @param {map}     $map        -- The styles map
// @param {boolean} $strict     -- Has !important flag?
// @param {boolean} $direction  -- Has LTR & RTL styles?
// @param {map}     $ltr-styles -- LTR styles
// @param {map}     $rtl-styles -- RTL styles
///
@mixin generate-styles($map, $strict: false, $direction: false, $ltr-styles: $ltr-styles, $rtl-styles: $rtl-styles) {
    @each $key, $value in $map {
        @include generate-vendor($key, $value, $strict);
    }
    @if $direction {
        @include direction-styles($ltr-styles, $rtl-styles, $strict);
    }
}


///
// @desc Generates css styles for a custom selector
//
// @param {map}     $map        -- The styles map
// @param {string}  $selector   -- The custom selector
// @param {boolean} $strict     -- Has !important flag?
// @param {boolean} $direction  -- Has LTR & RTL styles?
// @param {map}     $ltr-styles -- LTR styles
// @param {map}     $rtl-styles -- RTL styles
///
@mixin custom-styles($map, $selector, $strict: false, $direction: false, $ltr-styles: $ltr-styles, $rtl-styles: $rtl-styles) {
    // Generate styles
    #{$selector} {
        @include generate-styles($map, $strict, $direction, $ltr-styles, $rtl-styles);
    }
}


///
// @desc Generates colors
//
// @param {map}     $map      -- The colors map
// @param {string}  $name     -- Selector name
// @param {boolean} $reverse  -- Reverse default light & dark?
// @param {string}  $append   -- Addition part
// @param {string}  $pseudo   -- Pseudo part
///
@mixin generate-colors($map, $name, $reverse: false, $append: "", $pseudo: "") {
    // Sort color map
    $map: sort-color-map($map, $reverse);

    @each $key, $value in $map {
        // Get inner map
        $inner: inner-map($map, $key);

        // Document colors
        @if $key == "light" or $key == "dark" {
            @if check-doc-color($key, $reverse) {
                .#{$name + $append + $pseudo},
                .#{$name + $append}.#{$name + $mod + $key + $pseudo} {
                    @include generate-styles($inner);
                }
            }
            @else {
                .#{$name-doc + $mod + reverse-doc-color($key, $reverse)} .#{$name + $append + $pseudo},
                .#{$name + $append}.#{$name + $mod + $key + $pseudo} {
                    @include generate-styles($inner);
                }
            }
        }
        // Other colors
        @else{
            .#{$name + $append}.#{$name + $mod + $key + $pseudo} {
                @include generate-styles($inner);
            }
        }
    }
}


///
// @desc Generates light & dark color sets
//
// @param {map}     $map-1   -- The light colors map
// @param {map}     $map-2   -- The dark colors map
// @param {string}  $name    -- The name key
// @param {boolean} $reverse  -- Reverse default light & dark?
// @param {string}  $append   -- Addition part
// @param {string}  $pseudo   -- Pseudo part
///
@mixin generate-themes($map-1, $map-2, $name, $reverse: false, $append: "", $pseudo: "") {
    // Sort color map
    $map-1: sort-color-map($map-1, $reverse);
    $map-2: sort-color-map($map-2, $reverse);

    // Light color sets
    @each $key, $value in $map-1 {
        // Get inner map
        $inner: inner-map($map-1, $key);

        .#{$name-doc + $mod}light .#{$name + $append}.#{$name + $mod + $key + $pseudo} {
            @include generate-styles($inner);
        }
    }

    // Dark color sets
    @each $key, $value in $map-2 {
        // Get inner map
        $inner: inner-map($map-2, $key);

        .#{$name-doc + $mod}dark .#{$name + $append}.#{$name + $mod + $key + $pseudo} {
            @include generate-styles($inner);
        }
    }
}


// ------------------- //
//    Parent Mixins    //
// ------------------- //
///
// @desc Generates css styles for a parent
//
// @param {map}     $map        -- The styles map
// @param {string}  $name-1     -- 1st name key
// @param {string}  $name-2     -- 2nd name key
// @param {boolean} $strict     -- Has !important flag?
// @param {boolean} $direction  -- Has LTR & RTL styles?
// @param {map}     $ltr-styles -- LTR styles
// @param {map}     $rtl-styles -- RTL styles
///
@mixin parent-styles($map, $name-1, $name-2, $strict: false, $direction: false, $ltr-styles: $ltr-styles, $rtl-styles: $rtl-styles) {
    // Generate styles
    .#{$name-1 + $par + $name-2} {
        @include generate-styles($map, $strict, $direction, $ltr-styles, $rtl-styles);
    }
}


///
// @desc Generates css styles for a parent ::before & ::after
//
// @param {map}     $map        -- The styles map
// @param {string}  $name-1     -- 1st name key
// @param {string}  $name-2     -- 2nd name key
// @param {boolean} $strict     -- Has !important flag?
// @param {boolean} $direction  -- Has LTR & RTL styles?
// @param {map}     $ltr-styles -- LTR styles
// @param {map}     $rtl-styles -- RTL styles
///
@mixin parent-styles-pseudo($map, $name-1, $name-2, $strict: false, $direction: false, $ltr-styles: $ltr-styles, $rtl-styles: $rtl-styles) {
    // Generate styles
    .#{$name-1 + $par + $name-2}::before,
    .#{$name-1 + $par + $name-2}::after {
        @include generate-styles($map, $strict, $direction, $ltr-styles, $rtl-styles);
    }
}


///
// @desc Generates colors for a parent
//
// @param {map}     $map      -- The colors map
// @param {string}  $name-1   -- 1st name key
// @param {string}  $name-2   -- 2nd name key
// @param {boolean} $reverse  -- Reverse default light & dark?
///
@mixin parent-colors($map, $name-1, $name-2, $reverse: false) {
    $name: $name-1 + $par + $name-2;
    @include generate-colors($map, $name, $reverse);
}


// ------------------- //
//   Component Mixins  //
// ------------------- //
///
// @desc Generates css styles for a component 
//
// @param {map}     $map        -- The styles map
// @param {string}  $name       -- The name key
// @param {boolean} $strict     -- Has !important flag?
// @param {boolean} $direction  -- Has LTR & RTL styles?
// @param {map}     $ltr-styles -- LTR styles
// @param {map}     $rtl-styles -- RTL styles
///
@mixin component-styles($map, $name, $strict: false, $direction: false, $ltr-styles: $ltr-styles, $rtl-styles: $rtl-styles) {
    .#{$name} {
        @include generate-styles($map, $strict, $direction, $ltr-styles, $rtl-styles);
    }
}


///
// @desc Generates css styles for a component ::before & ::after
//
// @param {map}     $map        -- The styles map
// @param {string}  $name       -- The name key
// @param {boolean} $strict     -- Has !important flag?
// @param {boolean} $direction  -- Has LTR & RTL styles?
// @param {map}     $ltr-styles -- LTR styles
// @param {map}     $rtl-styles -- RTL styles
///
@mixin component-styles-pseudo($map, $name, $strict: false, $direction: false, $ltr-styles: $ltr-styles, $rtl-styles: $rtl-styles) {
    .#{$name}::before,
    .#{$name}::after {
        @include generate-styles($map, $strict, $direction, $ltr-styles, $rtl-styles);
    }
}


///
// @desc Generates css styles for a component ::before & ::after on hover
//
// @param {map}     $map        -- The styles map
// @param {string}  $name       -- The name key
// @param {boolean} $strict     -- Has !important flag?
// @param {boolean} $direction  -- Has LTR & RTL styles?
// @param {map}     $ltr-styles -- LTR styles
// @param {map}     $rtl-styles -- RTL styles
///
@mixin component-styles-pseudo-hover($map, $name, $strict: false, $direction: false, $ltr-styles: $ltr-styles, $rtl-styles: $rtl-styles) {
    .#{$name}:hover::before,
    .#{$name}:hover::after {
        @include generate-styles($map, $strict, $direction, $ltr-styles, $rtl-styles);
    }
}


///
// @desc Generates css styles for a component before
//
// @param {map}     $map        -- The styles map
// @param {string}  $name       -- The name key
// @param {boolean} $strict     -- Has !important flag?
// @param {boolean} $direction  -- Has LTR & RTL styles?
// @param {map}     $ltr-styles -- LTR styles
// @param {map}     $rtl-styles -- RTL styles
///
@mixin component-styles-before($map, $name, $strict: false, $direction: false, $ltr-styles: $ltr-styles, $rtl-styles: $rtl-styles) {
    .#{$name}::before {
        @include generate-styles($map, $strict, $direction, $ltr-styles, $rtl-styles);
    }
}


///
// @desc Generates css styles for a component after
//
// @param {map}     $map        -- The styles map
// @param {string}  $name       -- The name key
// @param {boolean} $strict     -- Has !important flag?
// @param {boolean} $direction  -- Has LTR & RTL styles?
// @param {map}     $ltr-styles -- LTR styles
// @param {map}     $rtl-styles -- RTL styles
///
@mixin component-styles-after($map, $name, $strict: false, $direction: false, $ltr-styles: $ltr-styles, $rtl-styles: $rtl-styles) {
    .#{$name}::after {
        @include generate-styles($map, $strict, $direction, $ltr-styles, $rtl-styles);
    }
}


///
// @desc Generates css styles for an empty component
//
// @param {map}     $map        -- The styles map
// @param {string}  $name       -- The name key
// @param {boolean} $strict     -- Has !important flag?
// @param {boolean} $direction  -- Has LTR & RTL styles?
// @param {map}     $ltr-styles -- LTR styles
// @param {map}     $rtl-styles -- RTL styles
///
@mixin component-styles-empty($map, $name, $strict: false, $direction: false, $ltr-styles: $ltr-styles, $rtl-styles: $rtl-styles) {
    .#{$name}:empty {
        @include generate-styles($map, $strict, $direction, $ltr-styles, $rtl-styles);
    }
}


///
// @desc Generates css styles for component items
//
// @param {map}     $map        -- The styles map
// @param {string}  $name       -- The name key
// @param {string}  $item       -- The item selector name
// @param {boolean} $nested     -- Is item nested?
// @param {boolean} $strict     -- Has !important flag?
// @param {boolean} $direction  -- Has LTR & RTL styles?
// @param {map}     $ltr-styles -- LTR styles
// @param {map}     $rtl-styles -- RTL styles
///
@mixin component-styles-items($map, $name, $item: "*", $nested: false, $strict: false, $direction: false, $ltr-styles: $ltr-styles, $rtl-styles: $rtl-styles) {
    $nest: "";
    @if not $nested {$nest: "> ";}

    .#{$name} #{$nest + $item} {
        @include generate-styles($map, $strict, $direction, $ltr-styles, $rtl-styles);
    }
}


///
// @desc Generates responsive css styles for a component 
//
// @param {map}     $map        -- The styles map
// @param {string}  $name       -- The name key
// @param {boolean} $responsive -- Is responsive?
// @param {boolean} $strict     -- Has !important flag?
///
@mixin responsive-component-styles($map, $name, $responsive: true, $strict: false) {
    @include responsive-blueprint($name, $responsive) {
        @include generate-styles($map, $strict);
    }
}


///
// @desc Generates auto responsive css styles for a component 
//
// @param {map}     $map        -- The styles map
// @param {string}  $name       -- The name key
// @param {boolean} $responsive -- Is responsive?
// @param {boolean} $strict     -- Has !important flag?
///
@mixin auto-component-styles($map, $name, $responsive: true, $strict: false) {
    @if $responsive == true {
        @each $key, $value in $map {
            // Get inner map
            $inner: inner-map($map, $key);

            // Create breakpoint
            @include breakpoint($key) {
                .#{$name} {
                    @include generate-styles($inner, $strict);
                }
            }
        }
    }
}


///
// @desc The blueprint for component classes
//
// @param {map}     $map      -- The class map
// @param {string}  $property -- The optional property name
// @param {boolean} $strict   -- Has !important flag?
// 
// @NOTICE If you omit the property, you have to provide a nested map
///
@mixin component-class-blueprint($map, $property: null, $strict: false) {
    @each $key, $value in $map {
        &#{$sep + $key} {
            // Single CSS property
            @if $property and $property != "" {
                @include generate-vendor($property, $value, $strict);
            }
            // Multiple CSS properties
            @else {
                // Get inner map
                $inner: inner-map($map, $key);

                @include generate-styles($inner, $strict);
            }
        }
    }
}


///
// @desc Generates css styles for a component class
//
// @param {map}     $map      -- The class map
// @param {string}  $name     -- The name key
// @param {string}  $property -- The optional property name
// @param {boolean} $strict   -- Has !important flag?
// 
// @NOTICE If you omit the property, you have to provide a nested map
///
@mixin component-class($map, $name, $property: null, $strict: false) {
    .#{$name} {
        @include component-class-blueprint($map, $property, $strict);
    }
}


///
// @desc Generates responsive css styles for a component class
//
// @param {map}     $map        -- The class map
// @param {string}  $name       -- The name key
// @param {string}  $property   -- The optional property name
// @param {boolean} $responsive -- Is responsive?
// @param {boolean} $strict     -- Has !important flag?
// 
// @NOTICE If you omit the property, you have to provide a nested map
///
@mixin responsive-component-class($map, $name, $property: null, $responsive: true, $strict: true) {
    @include responsive-blueprint($name, $responsive) {
        @include component-class-blueprint($map, $property, $strict);
    }
}


// ------------------- //
//   Modifier Mixins   //
// ------------------- //
///
// @desc Generates css styles for a modifier 
//
// @param {map}     $map        -- The styles map
// @param {string}  $name-1     -- 1st name key
// @param {string}  $name-2     -- 2nd name key
// @param {boolean} $strict     -- Has !important flag?
// @param {boolean} $direction  -- Has LTR & RTL styles?
// @param {map}     $ltr-styles -- LTR styles
// @param {map}     $rtl-styles -- RTL styles
///
@mixin modifier-styles($map, $name-1, $name-2, $strict: false, $direction: false, $ltr-styles: $ltr-styles, $rtl-styles: $rtl-styles) {
    // Generate styles
    .#{$name-1 + $mod + $name-2} {
        @include generate-styles($map, $strict, $direction, $ltr-styles, $rtl-styles);
    }
}


///
// @desc Generates css styles for a modifier items
//
// @param {map}     $map        -- The styles map
// @param {string}  $name-1     -- 1st name key
// @param {string}  $name-2     -- 2nd name key
// @param {string}  $item       -- The item selector name
// @param {boolean} $nested     -- Is item nested?
// @param {boolean} $strict     -- Has !important flag?
// @param {boolean} $direction  -- Has LTR & RTL styles?
// @param {map}     $ltr-styles -- LTR styles
// @param {map}     $rtl-styles -- RTL styles
///
@mixin modifier-styles-items($map, $name-1, $name-2, $item: "*", $nested: false, $strict: false, $direction: false, $ltr-styles: $ltr-styles, $rtl-styles: $rtl-styles) {
    $nest: "";
    @if not $nested {$nest: "> ";}
    
    // Generate styles
    .#{$name-1 + $mod + $name-2} #{$nest + $item} {
        @include generate-styles($map, $strict, $direction, $ltr-styles, $rtl-styles);
    }
}


///
// @desc Generates responsive css styles for a modifier 
//
// @param {map}     $map        -- The styles map
// @param {string}  $name-1     -- 1st name key
// @param {string}  $name-2     -- 2nd name key
// @param {boolean} $responsive -- Is responsive?
// @param {boolean} $strict     -- Has !important flag?
// @param {boolean} $direction  -- Has LTR & RTL styles?
// @param {map}     $ltr-styles -- LTR styles
// @param {map}     $rtl-styles -- RTL styles
///
@mixin responsive-modifier-styles($map, $name-1, $name-2, $responsive: true, $strict: false, $direction: false, $ltr-styles: $ltr-styles, $rtl-styles: $rtl-styles) {
    @include responsive-blueprint($name-1 + $mod + $name-2, $responsive) {
        @include generate-styles($map, $strict, $direction, $ltr-styles, $rtl-styles);
    }
}


///
// @desc Generates css styles for a set of modifiers
//
// @param {map}     $map        -- The styles map
// @param {string}  $name       -- The name key
// @param {boolean} $strict     -- Has !important flag?
// @param {boolean} $direction  -- Has LTR & RTL styles?
// @param {map}     $ltr-styles -- LTR styles
// @param {map}     $rtl-styles -- RTL styles
///
@mixin modifiers-styles($map, $name, $strict: false, $direction: false, $ltr-styles: $ltr-styles, $rtl-styles: $rtl-styles) {
    @each $key, $value in $map {
        // Get inner map
        $inner: inner-map($map, $key);

        // Get inner direction maps
        $inner-ltr: $ltr-styles;
        $inner-rtl: $rtl-styles;
        @if ($direction) {
            $inner-ltr: inner-map($ltr-styles, $key);
            $inner-rtl: inner-map($rtl-styles, $key);
        }

        // Generate styles
        .#{$name + $mod + $key} {
            @include generate-styles($inner, $strict, $direction, $inner-ltr, $inner-rtl);
        }
    }
}


///
// @desc Generates css styles for a set of modifiers ::before
//
// @param {map}     $map        -- The styles map
// @param {string}  $name       -- The name key
// @param {boolean} $strict     -- Has !important flag?
// @param {boolean} $direction  -- Has LTR & RTL styles?
// @param {map}     $ltr-styles -- LTR styles
// @param {map}     $rtl-styles -- RTL styles
///
@mixin modifiers-styles-before($map, $name, $strict: false, $direction: false, $ltr-styles: $ltr-styles, $rtl-styles: $rtl-styles) {
    @each $key, $value in $map {
        // Get inner map
        $inner: inner-map($map, $key);

        // Get inner direction maps
        $inner-ltr: $ltr-styles;
        $inner-rtl: $rtl-styles;
        @if ($direction) {
            $inner-ltr: inner-map($ltr-styles, $key);
            $inner-rtl: inner-map($rtl-styles, $key);
        }

        // Generate styles
        .#{$name + $mod + $key}::before {
            @include generate-styles($inner, $strict, $direction, $inner-ltr, $inner-rtl);
        }
    }
}


///
// @desc Generates css styles for a set of modifiers ::before
//
// @param {map}     $map        -- The styles map
// @param {string}  $name       -- The name key
// @param {string}  $append     -- Addition part
// @param {boolean} $strict     -- Has !important flag?
// @param {boolean} $direction  -- Has LTR & RTL styles?
// @param {map}     $ltr-styles -- LTR styles
// @param {map}     $rtl-styles -- RTL styles
///
@mixin modifiers-styles-append($map, $name, $append: "", $strict: false, $direction: false, $ltr-styles: $ltr-styles, $rtl-styles: $rtl-styles) {
    @each $key, $value in $map {
        // Get inner map
        $inner: inner-map($map, $key);

        // Get inner direction maps
        $inner-ltr: $ltr-styles;
        $inner-rtl: $rtl-styles;
        @if ($direction) {
            $inner-ltr: inner-map($ltr-styles, $key);
            $inner-rtl: inner-map($rtl-styles, $key);
        }

        // Generate styles
        .#{$name + $mod + $key + $append} {
            @include generate-styles($inner, $strict, $direction, $inner-ltr, $inner-rtl);
        }
    }
}


///
// @desc Generates css styles for a set of modifiers ::after
//
// @param {map}     $map        -- The styles map
// @param {string}  $name       -- The name key
// @param {boolean} $strict     -- Has !important flag?
// @param {boolean} $direction  -- Has LTR & RTL styles?
// @param {map}     $ltr-styles -- LTR styles
// @param {map}     $rtl-styles -- RTL styles
///
@mixin modifiers-styles-after($map, $name, $strict: false, $direction: false, $ltr-styles: $ltr-styles, $rtl-styles: $rtl-styles) {
    @each $key, $value in $map {
        // Get inner map
        $inner: inner-map($map, $key);

        // Get inner direction maps
        $inner-ltr: $ltr-styles;
        $inner-rtl: $rtl-styles;
        @if ($direction) {
            $inner-ltr: inner-map($ltr-styles, $key);
            $inner-rtl: inner-map($rtl-styles, $key);
        }

        // Generate styles
        .#{$name + $mod + $key}::after {
            @include generate-styles($inner, $strict, $direction, $inner-ltr, $inner-rtl);
        }
    }
}


///
// @desc Generates css styles for modifiers items
//
// @param {map}     $map        -- The styles map
// @param {string}  $name       -- The name key
// @param {string}  $item       -- The item selector name
// @param {boolean} $nested     -- Is item nested?
// @param {boolean} $strict     -- Has !important flag?
// @param {boolean} $direction  -- Has LTR & RTL styles?
// @param {map}     $ltr-styles -- LTR styles
// @param {map}     $rtl-styles -- RTL styles
///
@mixin modifiers-styles-items($map, $name, $item: "*", $nested: false, $strict: false, $direction: false, $ltr-styles: $ltr-styles, $rtl-styles: $rtl-styles) {
    $nest: "";
    @if not $nested {$nest: "> ";}

    @each $key, $value in $map {
        // Get inner map
        $inner: inner-map($map, $key);

        // Get inner direction maps
        $inner-ltr: $ltr-styles;
        $inner-rtl: $rtl-styles;
        @if ($direction) {
            $inner-ltr: inner-map($ltr-styles, $key);
            $inner-rtl: inner-map($rtl-styles, $key);
        }

        // Generate styles
        .#{$name + $mod + $key} #{$nest + $item} {
            @include generate-styles($inner, $strict, $direction, $inner-ltr, $inner-rtl);
        }
    }
}


///
// @desc Generates css styles for modifiers items ::before & ::after
//
// @param {map}     $map        -- The styles map
// @param {string}  $name       -- The name key
// @param {string}  $item       -- The item selector name
// @param {boolean} $nested     -- Is item nested?
// @param {boolean} $strict     -- Has !important flag?
// @param {boolean} $direction  -- Has LTR & RTL styles?
// @param {map}     $ltr-styles -- LTR styles
// @param {map}     $rtl-styles -- RTL styles
///
@mixin modifiers-styles-items-pseudo($map, $name, $item: "*", $nested: false, $strict: false, $direction: false, $ltr-styles: $ltr-styles, $rtl-styles: $rtl-styles) {
    $nest: "";
    @if not $nested {$nest: "> ";}

    @each $key, $value in $map {
        // Get inner map
        $inner: inner-map($map, $key);

        // Get inner direction maps
        $inner-ltr: $ltr-styles;
        $inner-rtl: $rtl-styles;
        @if ($direction) {
            $inner-ltr: inner-map($ltr-styles, $key);
            $inner-rtl: inner-map($rtl-styles, $key);
        }

        // Generate styles
        .#{$name + $mod + $key} #{$nest + $item}::before,
        .#{$name + $mod + $key} #{$nest + $item}::after {
            @include generate-styles($inner, $strict, $direction, $inner-ltr, $inner-rtl);
        }
    }
}


///
// @desc Generates css styles for hoverable modifiers item (child)
//
// @param {map}     $map        -- The styles map
// @param {string}  $name       -- The name key
// @param {string}  $item       -- The item selector name
// @param {boolean} $nested     -- Is item nested?
// @param {boolean} $strict     -- Has !important flag?
// @param {boolean} $direction  -- Has LTR & RTL styles?
// @param {map}     $ltr-styles -- LTR styles
// @param {map}     $rtl-styles -- RTL styles
///
@mixin modifiers-styles-items-hoverable($map, $name, $item: "*", $nested: false, $strict: false, $direction: false, $ltr-styles: $ltr-styles, $rtl-styles: $rtl-styles) {
    $nest: "";
    @if not $nested {$nest: "> ";}

    @each $key, $value in $map {
        // Get inner map
        $inner: inner-map($map, $key);

        // Get inner direction maps
        $inner-ltr: $ltr-styles;
        $inner-rtl: $rtl-styles;
        @if ($direction) {
            $inner-ltr: inner-map($ltr-styles, $key);
            $inner-rtl: inner-map($rtl-styles, $key);
        }

        // Generate styles
        .#{$name + $mod + $key}.#{$name + $mod + $hoverable} #{$nest + $item} {
            @include generate-styles($inner, $strict, $direction, $inner-ltr, $inner-rtl);
        }
    }
}


///
// @desc The blueprint for modifier classes
//
// @param {map}     $map      -- The class map
// @param {string}  $property -- The optional property name
// @param {boolean} $strict   -- Has !important flag?
// 
// @NOTICE If you omit the property, you have to provide a nested map
///
@mixin modifier-class-blueprint($map, $property: null, $strict: false) {
    @each $key, $value in $map {
        &#{$mod + $key} {
            // Single CSS property
            @if $property and $property != "" {
                @include generate-vendor($property, $value, $strict);
            }
            // Multiple CSS properties
            @else {
                // Get inner map
                $inner: inner-map($map, $key);

                @include generate-styles($inner, $strict);
            }
        }
    }
}


///
// @desc Generates css styles for a modifier class
//
// @param {map}     $map      -- The class map
// @param {string}  $name     -- The name key
// @param {string}  $property -- The optional property name
// @param {boolean} $strict   -- Has !important flag?
// 
// @NOTICE If you omit the property, you have to provide a nested map
///
@mixin modifier-class($map, $name, $property: null, $strict: false) {
    .#{$name} {
        @include modifier-class-blueprint($map, $property, $strict);
    }
}


///
// @desc Generates responsive css styles for a modifier class
//
// @param {map}     $map        -- The class map
// @param {string}  $name       -- The name key
// @param {string}  $property   -- The optional property name
// @param {boolean} $responsive -- Is responsive?
// @param {boolean} $strict     -- Has !important flag?
// 
// @NOTICE If you omit the property, you have to provide a nested map
///
@mixin responsive-modifier-class($map, $name, $property: null, $responsive: true, $strict: true) {
    @include responsive-blueprint($name, $responsive) {
        @include modifier-class-blueprint($map, $property, $strict);
    }
}


///
// @desc Generates colors for a modifier
//
// @param {map}     $map     -- The colors map
// @param {string}  $name    -- The name key
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin modifier-colors($map, $name, $reverse: false) {
    @include generate-colors($map, $name, $reverse);
}


///
// @desc Generates colors for a modifier ::before
//
// @param {map}     $map     -- The colors map
// @param {string}  $name    -- The name key
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin modifier-colors-before($map, $name, $reverse: false) {
    @include generate-colors($map, $name, $reverse, "", "::before");
}


///
// @desc Generates colors for a modifier ::after
//
// @param {map}     $map     -- The colors map
// @param {string}  $name    -- The name key
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin modifier-colors-after($map, $name, $reverse: false) {
    @include generate-colors($map, $name, $reverse, "", "::after");
}


///
// @desc Generates colors for a modifier on hover
//
// @param {map}     $map     -- The colors map
// @param {string}  $name    -- The name key
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin modifier-colors-hover($map, $name, $reverse: false) {
    @include generate-colors($map, $name, $reverse, "", ":not(:disabled):hover");
}


///
// @desc Generates colors for a modifier for mouse focus event
//
// @param {map}     $map     -- The colors map
// @param {string}  $name    -- The name key
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin modifier-colors-focus($map, $name, $reverse: false) {
    @include generate-colors($map, $name, $reverse, "", ":not(:disabled):focus");
}


///
// @desc Generates colors for a modifier for mouse active event
//
// @param {map}     $map     -- The colors map
// @param {string}  $name    -- The name key
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin modifier-colors-active($map, $name, $reverse: false) {
    @include generate-colors($map, $name, $reverse, "", ":not(:disabled):active");
}


///
// @desc Generates hoverable colors for a modifier
//
// @param {map}     $map     -- The colors map
// @param {string}  $name    -- The name key
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin modifier-colors-hoverable($map, $name, $reverse: false) {
    @include generate-colors($map, $name, $reverse, $mod + $hoverable);
}


///
// @desc Generates hoverable colors for a modifier on hover
//
// @param {map}     $map     -- The colors map
// @param {string}  $name    -- The name key
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin modifier-colors-hovered($map, $name, $reverse: false) {
    @include generate-colors($map, $name, $reverse, $mod + $hoverable, ":not(:disabled):hover");
}


///
// @desc Generates focusable colors for a modifier
//
// @param {map}     $map     -- The colors map
// @param {string}  $name    -- The name key
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin modifier-colors-focusable($map, $name, $reverse: false) {
    @include generate-colors($map, $name, $reverse, $mod + $focusable);
}


///
// @desc Generates focusable colors for a modifier on focus
//
// @param {map}     $map     -- The colors map
// @param {string}  $name    -- The name key
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin modifier-colors-focused($map, $name, $reverse: false) {
    @include generate-colors($map, $name, $reverse, $mod + $focusable, ":not(:disabled):focus");
}


///
// @desc Generates bordered colors for a modifier
//
// @param {map}     $map     -- The colors map
// @param {string}  $name    -- The name key
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin modifier-colors-bordered($map, $name, $reverse: false) {
    @include generate-colors($map, $name, $reverse, $mod + $name-bordered);
}


///
// @desc Generates colors for a modifier items
//
// @param {map}     $map     -- The colors map
// @param {string}  $name    -- The name key
// @param {string}  $item    -- The item selector name
// @param {boolean} $nested  -- Is item nested?
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin modifier-colors-items($map, $name, $item: "*", $nested: false, $reverse: false) {
    $nest: "";
    @if not $nested {$nest: "> ";}

    @include generate-colors($map, $name, $reverse, "", " " + $nest + $item);
}


///
// @desc Generates colors for a modifier items ::before
//
// @param {map}     $map     -- The colors map
// @param {string}  $name    -- The name key
// @param {string}  $item    -- The item selector name
// @param {boolean} $nested  -- Is item nested?
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin modifier-colors-items-before($map, $name, $item: "*", $nested: false, $reverse: false) {
    $nest: "";
    @if not $nested {$nest: "> ";}

    @include generate-colors($map, $name, $reverse, "", " " + $nest + $item + "::before");
}


///
// @desc Generates colors for a modifier items ::after
//
// @param {map}     $map     -- The colors map
// @param {string}  $name    -- The name key
// @param {string}  $item    -- The item selector name
// @param {boolean} $nested  -- Is item nested?
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin modifier-colors-items-after($map, $name, $item: "*", $nested: false, $reverse: false) {
    $nest: "";
    @if not $nested {$nest: "> ";}

    @include generate-colors($map, $name, $reverse, "", " " + $nest + $item + "::after");
}


///
// @desc Generates colors for a modifier items on hover
//
// @param {map}     $map     -- The colors map
// @param {string}  $name    -- The name key
// @param {string}  $item    -- The item selector name
// @param {boolean} $nested  -- Is item nested?
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin modifier-colors-items-hover($map, $name, $item: "*", $nested: false, $reverse: false) {
    $nest: "";
    @if not $nested {$nest: "> ";}

    @include generate-colors($map, $name, $reverse, "", " " + $nest + $item + ":not(:disabled):hover");
}


///
// @desc Generates hoverable colors for modifier items
//
// @param {map}     $map     -- The colors map
// @param {string}  $name    -- The name key
// @param {string}  $item    -- The item selector name
// @param {boolean} $nested  -- Is item nested?
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin modifier-colors-items-hoverable($map, $name, $item: "*", $nested: false, $reverse: false) {
    $nest: "";
    @if not $nested {$nest: "> ";}

    @include generate-colors($map, $name, $reverse, $mod + $hoverable, " " + $nest + $item + ":not(:disabled)");
}


///
// @desc Generates hoverable colors for modifier items on hover
//
// @param {map}     $map     -- The colors map
// @param {string}  $name    -- The name key
// @param {string}  $item    -- The item selector name
// @param {boolean} $nested  -- Is item nested?
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin modifier-colors-items-hovered($map, $name, $item: "*", $nested: false, $reverse: false) {
    $nest: "";
    @if not $nested {$nest: "> ";}

    @include generate-colors($map, $name, $reverse, $mod + $hoverable, " " + $nest + $item + ":not(:disabled):hover");
}


///
// @desc Generates light & dark color sets for a modifier
//
// @param {map}     $map-1   -- The light colors map
// @param {map}     $map-2   -- The dark colors map
// @param {string}  $name    -- The name key
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin modifier-themes($map-1, $map-2, $name, $reverse: false) {
    @include generate-themes($map-1, $map-2, $name, $reverse);
}


///
// @desc Generates light & dark color sets for a modifier on hover
//
// @param {map}     $map-1   -- The light colors map
// @param {map}     $map-2   -- The dark colors map
// @param {string}  $name    -- The name key
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin modifier-themes-hover($map-1, $map-2, $name, $reverse: false) {
    @include generate-themes($map-1, $map-2, $name, $reverse, "", ":not(:disabled):hover");
}


///
// @desc Generates light & dark color sets for a modifier items
//
// @param {map}     $map-1   -- The light colors map
// @param {map}     $map-2   -- The dark colors map
// @param {string}  $name    -- The name key
// @param {string}  $item    -- The item selector name
// @param {boolean} $nested  -- Is item nested?
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin modifier-themes-items($map-1, $map-2, $name, $item: "*", $nested: false, $reverse: false) {
    $nest: "";
    @if not $nested {$nest: "> ";}

    @include generate-themes($map-1, $map-2, $name, $reverse, "", " " + $nest + $item);
}


///
// @desc Generates light & dark color sets for a modifier items on hover
//
// @param {map}     $map-1   -- The light colors map
// @param {map}     $map-2   -- The dark colors map
// @param {string}  $name    -- The name key
// @param {string}  $item    -- The item selector name
// @param {boolean} $nested  -- Is item nested?
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin modifier-themes-items-hover($map-1, $map-2, $name, $item: "*", $nested: false, $reverse: false) {
    $nest: "";
    @if not $nested {$nest: "> ";}

    @include generate-themes($map-1, $map-2, $name, $reverse, "", " " + $nest + $item + ":not(:disabled):hover");
}


///
// @desc Generates light & dark color sets for a modifier
//
// @param {map}     $map-1   -- The light colors map
// @param {map}     $map-2   -- The dark colors map
// @param {string}  $name    -- The name key
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin modifier-themes-bordered($map-1, $map-2, $name, $reverse: false) {
    @include generate-themes($map-1, $map-2, $name, $reverse, $mod + $name-bordered);
}


// ------------------- //
//     Child Mixins    //
// ------------------- //
///
// @desc The blueprint for child classes
//
// @param {map}     $map      -- The class map
// @param {string}  $property -- The optional property name
// @param {boolean} $strict   -- Has !important flag?
// 
// @NOTICE If you omit the property, you have to provide a nested map
///
@mixin child-class-blueprint($map, $property: null, $strict: false) {
    @each $key, $value in $map {
        &#{$chi + $key} {
            // Single CSS property
            @if $property and $property != "" {
                @include generate-vendor($property, $value, $strict);
            }
            // Multiple CSS properties
            @else {
                // Get inner map
                $inner: inner-map($map, $key);

                @include generate-styles($inner, $strict);
            }
        }
    }
}


///
// @desc Generates css styles for a child class
//
// @param {map}     $map      -- The class map
// @param {string}  $name     -- The name key
// @param {string}  $property -- The optional property name
// @param {boolean} $strict   -- Has !important flag?
// 
// @NOTICE If you omit the property, you have to provide a nested map
///
@mixin child-class($map, $name, $property: null, $strict: false) {
    .#{$name} {
        @include child-class-blueprint($map, $property, $strict);
    }
}


///
// @desc Generates responsive css styles for a child class
//
// @param {map}     $map        -- The class map
// @param {string}  $name       -- The name key
// @param {string}  $property   -- The optional property name
// @param {boolean} $responsive -- Is responsive?
// @param {boolean} $strict     -- Has !important flag?
// 
// @NOTICE If you omit the property, you have to provide a nested map
///
@mixin responsive-child-class($map, $name, $property: null, $responsive: true, $strict: true) {
    @include responsive-blueprint($name, $responsive) {
        @include child-class-blueprint($map, $property, $strict);
    }
}


///
// @desc Generates css styles for a child 
//
// @param {map}     $map        -- The styles map
// @param {string}  $name-1     -- 1st name key
// @param {string}  $name-2     -- 2nd name key
// @param {boolean} $strict     -- Has !important flag?
// @param {boolean} $direction  -- Has LTR & RTL styles?
// @param {map}     $ltr-styles -- LTR styles
// @param {map}     $rtl-styles -- RTL styles
///
@mixin child-styles($map, $name-1, $name-2, $strict: false, $direction: false, $ltr-styles: $ltr-styles, $rtl-styles: $rtl-styles) {
    // Generate styles
    .#{$name-1 + $chi + $name-2} {
        @include generate-styles($map, $strict, $direction, $ltr-styles, $rtl-styles);
    }
}


///
// @desc Generates css styles for a child ::before
//
// @param {map}     $map        -- The styles map
// @param {string}  $name-1     -- 1st name key
// @param {string}  $name-2     -- 2nd name key
// @param {boolean} $strict     -- Has !important flag?
// @param {boolean} $direction  -- Has LTR & RTL styles?
// @param {map}     $ltr-styles -- LTR styles
// @param {map}     $rtl-styles -- RTL styles
///
@mixin child-styles-before($map, $name-1, $name-2, $strict: false, $direction: false, $ltr-styles: $ltr-styles, $rtl-styles: $rtl-styles) {
    // Generate styles
    .#{$name-1 + $chi + $name-2}::before {
        @include generate-styles($map, $strict, $direction, $ltr-styles, $rtl-styles);
    }
}


///
// @desc Generates css styles for a child ::after
//
// @param {map}     $map        -- The styles map
// @param {string}  $name-1     -- 1st name key
// @param {string}  $name-2     -- 2nd name key
// @param {boolean} $strict     -- Has !important flag?
// @param {boolean} $direction  -- Has LTR & RTL styles?
// @param {map}     $ltr-styles -- LTR styles
// @param {map}     $rtl-styles -- RTL styles
///
@mixin child-styles-after($map, $name-1, $name-2, $strict: false, $direction: false, $ltr-styles: $ltr-styles, $rtl-styles: $rtl-styles) {
    // Generate styles
    .#{$name-1 + $chi + $name-2}::after {
        @include generate-styles($map, $strict, $direction, $ltr-styles, $rtl-styles);
    }
}


///
// @desc Generates css styles for a child ::before & ::after
//
// @param {map}     $map        -- The styles map
// @param {string}  $name-1     -- 1st name key
// @param {string}  $name-2     -- 2nd name key
// @param {boolean} $strict     -- Has !important flag?
// @param {boolean} $direction  -- Has LTR & RTL styles?
// @param {map}     $ltr-styles -- LTR styles
// @param {map}     $rtl-styles -- RTL styles
///
@mixin child-styles-pseudo($map, $name-1, $name-2, $strict: false, $direction: false, $ltr-styles: $ltr-styles, $rtl-styles: $rtl-styles) {
    // Generate styles
    .#{$name-1 + $chi + $name-2}::before,
    .#{$name-1 + $chi + $name-2}::after {
        @include generate-styles($map, $strict, $direction, $ltr-styles, $rtl-styles);
    }
}


///
// @desc Generates css styles for a child items
//
// @param {map}     $map        -- The styles map
// @param {string}  $name-1     -- 1st name key
// @param {string}  $name-2     -- 2nd name key
// @param {boolean} $strict     -- Has !important flag?
// @param {boolean} $direction  -- Has LTR & RTL styles?
// @param {map}     $ltr-styles -- LTR styles
// @param {map}     $rtl-styles -- RTL styles
///
@mixin child-styles-items($map, $name-1, $name-2, $item: "*", $nested: false, $strict: false, $direction: false, $ltr-styles: $ltr-styles, $rtl-styles: $rtl-styles) {
    $nest: "";
    @if not $nested {$nest: "> ";}

    // Generate styles
    .#{$name-1 + $chi + $name-2} #{$nest + $item} {
        @include generate-styles($map, $strict, $direction, $ltr-styles, $rtl-styles);
    }
}


///
// @desc Generates colors for a child
//
// @param {map}     $map     -- The colors map
// @param {string}  $name-1  -- 1st name key
// @param {string}  $name-2  -- 2nd name key
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin child-colors($map, $name-1, $name-2, $reverse: false) {
    $name: $name-1 + $chi + $name-2;
    @include generate-colors($map, $name, $reverse);
}


///
// @desc Generates colors for a child
//
// @param {map}     $map     -- The colors map
// @param {string}  $name-1  -- 1st name key
// @param {string}  $name-2  -- 2nd name key
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin child-colors-hover($map, $name-1, $name-2, $reverse: false) {
    $name: $name-1 + $chi + $name-2;
    @include generate-colors($map, $name, $reverse, "", ":not(:disabled):hover");
}


///
// @desc Generates colors for a child items
//
// @param {map}     $map     -- The colors map
// @param {string}  $name-1  -- 1st name key
// @param {string}  $name-2  -- 2nd name key
// @param {string}  $item    -- The item selector name
// @param {boolean} $nested  -- Is item nested?
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin child-colors-items($map, $name-1, $name-2, $item: "*", $nested: false, $reverse: false) {
    $nest: "";
    @if not $nested {$nest: "> ";}

    $name: $name-1 + $chi + $name-2;

    @include generate-colors($map, $name, $reverse, "", " " + $nest + $item);
}


///
// @desc Generates colors for a child items on hover
//
// @param {map}     $map     -- The colors map
// @param {string}  $name-1  -- 1st name key
// @param {string}  $name-2  -- 2nd name key
// @param {string}  $item    -- The item selector name
// @param {boolean} $nested  -- Is item nested?
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin child-colors-items-hover($map, $name-1, $name-2, $item: "*", $nested: false, $reverse: false) {
    $nest: "";
    @if not $nested {$nest: "> ";}

    $name: $name-1 + $chi + $name-2;

    @include generate-colors($map, $name, $reverse, "", " " + $nest + $item + ":not(:disabled):hover");
}


///
// @desc Generates light & dark color sets for a child
//
// @param {map}     $map-1   -- The light colors map
// @param {map}     $map-2   -- The dark colors map
// @param {string}  $name-1  -- 1st name key
// @param {string}  $name-2  -- 2nd name key
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin child-themes($map-1, $map-2, $name-1, $name-2, $reverse: false) {
    $name: $name-1 + $chi + $name-2;
    @include generate-themes($map-1, $map-2, $name, $reverse);
}


///
// @desc Generates light & dark color sets for a child on hover
//
// @param {map}     $map-1   -- The light colors map
// @param {map}     $map-2   -- The dark colors map
// @param {string}  $name-1  -- 1st name key
// @param {string}  $name-2  -- 2nd name key
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin child-themes-hover($map-1, $map-2, $name-1, $name-2, $reverse: false) {
    $name: $name-1 + $chi + $name-2;
    @include generate-themes($map-1, $map-2, $name, $reverse, "", ":not(:disabled):hover");
}


///
// @desc Generates light & dark color sets for a child items
//
// @param {map}     $map-1   -- The light colors map
// @param {map}     $map-2   -- The dark colors map
// @param {string}  $name-1  -- 1st name key
// @param {string}  $name-2  -- 2nd name key
// @param {string}  $item    -- The item selector name
// @param {boolean} $nested  -- Is item nested?
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin child-themes-items($map-1, $map-2, $name-1, $name-2, $item: "*", $nested: false, $reverse: false) {
    $nest: "";
    @if not $nested {$nest: "> ";}

    $name: $name-1 + $chi + $name-2;

    @include generate-themes($map-1, $map-2, $name, $reverse, "", " " + $nest + $item);
}


///
// @desc Generates light & dark color sets for a child items on hover
//
// @param {map}     $map-1   -- The light colors map
// @param {map}     $map-2   -- The dark colors map
// @param {string}  $name-1  -- 1st name key
// @param {string}  $name-2  -- 2nd name key
// @param {string}  $item    -- The item selector name
// @param {boolean} $nested  -- Is item nested?
// @param {boolean} $reverse -- Reverse default light & dark?
///
@mixin child-themes-items-hover($map-1, $map-2, $name-1, $name-2, $item: "*", $nested: false, $reverse: false) {
    $nest: "";
    @if not $nested {$nest: "> ";}

    $name: $name-1 + $chi + $name-2;

    @include generate-themes($map-1, $map-2, $name, $reverse, "", " " + $nest + $item + ":not(:disabled):hover");
}


// ------------------- //
//    Sibling Mixins   //
// ------------------- //
///
// @desc Generates css styles for a sibling 
//
// @param {map}     $map        -- The styles map
// @param {string}  $name-1     -- 1st name key
// @param {string}  $name-2     -- 2nd name key
// @param {boolean} $strict     -- Has !important flag?
// @param {boolean} $direction  -- Has LTR & RTL styles?
// @param {map}     $ltr-styles -- LTR styles
// @param {map}     $rtl-styles -- RTL styles
///
@mixin sibling-styles($map, $name-1, $name-2, $strict: false, $direction: false, $ltr-styles: $ltr-styles, $rtl-styles: $rtl-styles) {
    // Generate styles
    .#{$name-1 + $sib + $name-2} {
        @include generate-styles($map, $strict, $direction, $ltr-styles, $rtl-styles);
    }
}


///
// @desc Generates colors for a sibling
//
// @param {map} $map         -- The colors map
// @param {string} $name-1   -- 1st name key
// @param {string} $name-2   -- 2nd name key
// @param {boolean} $reverse -- Reverse default light & dark?
// @param {boolean} $short   -- Use shorthand naming?
///
@mixin sibling-colors($map, $name-1, $name-2, $reverse: false, $short: false) {
    $name: $name-1 + $sib + $name-2;
    @include generate-colors($map, $name, $reverse);
}
